#pragma once
#include <algorithm>
#include <string>
#include <iostream>
using namespace std;

template <typename T>
class MyBagTemplate
{
private:
    T* bag;
    int size;
    int capacity;

public:
	//Constructor
    MyBagTemplate()
    {
        bag = nullptr;
        size = 0;
        capacity = 0;
    }

	//Destructor
    ~MyBagTemplate()
    {
        delete[] bag;
    }

	// Precondition: N/A
	// Postcondition: Return the current number of elements in the bag
    int getSize() const
    {
        return size;
    }

	// Precondition: N/A
	// Postcondition: Return the current capacity of the bag
    int getCapacity() const
    {
        return capacity;
    }

	// Precondition: N/A
	// Postcondition: Insert a new element into the bag; grow the bag if full
    void insert(const T& value)
    {
        if (size == capacity)
        {
            growBag();
        }

        bag[size] = value;
        size++;
    }

	// Precondition: N/A
	// Postcondition: Double the capacity of the bag when full
    void growBag()
    {
        int newCapacity;

        if (capacity != 0)
        {
            newCapacity = capacity * 2;
        }
        else
        {
            newCapacity = 3;
        }

        T* temp = new T[newCapacity];

        for (int i = 0; i < size; i++)
        {
            temp[i] = bag[i];
        }

        delete[] bag;
        bag = temp;
        capacity = newCapacity;
    }

	// Precondition: N/A
	// Postcondition: Clear all elements from the bag and reset to initial capacity
    void clear()
    {
        delete[] bag;
        size = 0;
        capacity = 3;
        bag = new T[capacity];
        cout << "\n\t\tMyBagTemplate is cleared of all elements.\n";
    }

	// Precondition: N/A
	// Postcondition: Sort the elements in the bag in ascending order
    void sortBag()
    {
        sort(bag, bag + size);
        cout << "\n\tMyBagTemplate has been sorted.\n\n";
    }

	// Precondition: index is within the range of 0 to size-1
	// Postcondition: Remove the element at the specified index and shift remaining elements left; shrink the bag if necessary
    void remove(int index)
    {
        if (index < 0 || index >= size)
            return;

        for (int i = index; i < size - 1; i++)
        {
            bag[i] = bag[i + 1];
        }

        size--;

        if (size == (capacity / 2))
        {
            shrinkBag();
        }
    }

	// Precondition: N/A
	// Postcondition: Reduce the capacity of the bag to match the current size
    void shrinkBag()
    {
        capacity = size;
        T* temp = new T[capacity];

        for (int i = 0; i < size; i++)
        {
            temp[i] = bag[i];
        }

        delete[] bag;
        bag = temp;
    }

	// Precondition: N/A
	// Postcondition: Linear search to find the index of a value in the bag; returns -1 if not found
    int linearSearch(const T& value) const
    {
        for (int i = 0; i < size; i++)
        {
            if (bag[i] == value)
                return i;
        }
        return -1;
    }

	// Precondition: index is within the range of 0 to size-1
	// Postcondition: Overloaded subscript operator to access elements in the bag
    T operator[](int index) const
    {
        return bag[index];
    }

    // Friend function for output
	//Precondition: N/A
	//Postcondition: Displays the elements in the bag
    friend ostream& operator<<(ostream& output, const MyBagTemplate<T>& b)
    {
       
            output << "\n\t\tMyBagTemplate contains these sorted items:";
            for (int i = 0; i < b.size; i++)
                output << "\n\t\t[" << i << "] - " << b.bag[i];

        output << "\n";
        return output;
    }
};
